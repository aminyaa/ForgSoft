#pragma once
#ifndef _TensorNFields_Header
#define _TensorNFields_Header

#include <VectorTensorNFieldsFwd.hxx>
#include <Field.hxx>

#define TEMPLATE
#include <FieldFunctionsM.hxx>

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#define TensorN_FieldFunctions(tensorType,diagTensorType,                    \
                               sphericalTensorType,vectorType,CmptType,      \
                               args)										 \
                                                                             \
UNARY_FUNCTION(CmptType, tensorType, det)                                    \
UNARY_FUNCTION(tensorType, tensorType, inv)                                  \
UNARY_FUNCTION(diagTensorType, tensorType, diag)                             \
UNARY_FUNCTION(tensorType, tensorType, negSumDiag)                           \
                                                                             \
BINARY_OPERATOR(tensorType, CmptType, tensorType, /, divide)                 \
BINARY_TYPE_OPERATOR(tensorType, CmptType, tensorType, /, divide)            \
                                                                             \
BINARY_OPERATOR(vectorType, vectorType, tensorType, /, divide)               \
BINARY_TYPE_OPERATOR(vectorType, vectorType, tensorType, /, divide)          \
                                                                             \
BINARY_OPERATOR(tensorType, tensorType, tensorType, /, divide)               \
BINARY_TYPE_OPERATOR(tensorType, tensorType, tensorType, /, divide)          \
                                                                             \
BINARY_OPERATOR(tensorType, tensorType, diagTensorType, /, divide)           \
BINARY_TYPE_OPERATOR(tensorType, tensorType, diagTensorType, /, divide)      \
                                                                             \
BINARY_OPERATOR(tensorType, diagTensorType, tensorType, /, divide)           \
BINARY_TYPE_OPERATOR(tensorType, diagTensorType, tensorType, /, divide)      \
                                                                             \
BINARY_OPERATOR(tensorType, sphericalTensorType, tensorType, /, divide)      \
BINARY_TYPE_OPERATOR(tensorType, sphericalTensorType, tensorType, /, divide) \
                                                                             \
BINARY_OPERATOR(tensorType, tensorType, sphericalTensorType, /, divide)      \
BINARY_TYPE_OPERATOR(tensorType, tensorType, sphericalTensorType, /, divide) \
                                                                             \
BINARY_OPERATOR(tensorType, tensorType, tensorType, +, add)                  \
BINARY_OPERATOR(tensorType, tensorType, tensorType, -, subtract)             \
                                                                             \
BINARY_TYPE_OPERATOR(tensorType, tensorType, tensorType, +, add)             \
BINARY_TYPE_OPERATOR(tensorType, tensorType, tensorType, -, subtract)        \
                                                                             \
BINARY_OPERATOR(tensorType, diagTensorType, tensorType, +, add)              \
BINARY_OPERATOR(tensorType, diagTensorType, tensorType, -, subtract)         \
                                                                             \
BINARY_TYPE_OPERATOR(tensorType, diagTensorType, tensorType, +, add)         \
BINARY_TYPE_OPERATOR(tensorType, diagTensorType, tensorType, -, subtract)    \
                                                                             \
BINARY_OPERATOR(tensorType, tensorType, diagTensorType, +, add)              \
BINARY_OPERATOR(tensorType, tensorType, diagTensorType, -, subtract)         \
                                                                             \
BINARY_TYPE_OPERATOR(tensorType, tensorType, diagTensorType, +, add)         \
BINARY_TYPE_OPERATOR(tensorType, tensorType, diagTensorType, -, subtract)    \
                                                                             \
BINARY_OPERATOR(tensorType, sphericalTensorType, tensorType, +, add)         \
BINARY_OPERATOR(tensorType, sphericalTensorType, tensorType, -, subtract)    \
                                                                             \
BINARY_TYPE_OPERATOR(tensorType, sphericalTensorType, tensorType, +, add)    \
BINARY_TYPE_OPERATOR(tensorType, sphericalTensorType, tensorType, -, subtract) \
                                                                             \
BINARY_OPERATOR(tensorType, tensorType, sphericalTensorType, +, add)         \
BINARY_OPERATOR(tensorType, tensorType, sphericalTensorType, -, subtract)    \
                                                                             \
BINARY_TYPE_OPERATOR(tensorType, tensorType, sphericalTensorType, +, add)    \
BINARY_TYPE_OPERATOR(tensorType, tensorType, sphericalTensorType, -, subtract)

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace tnbLib
{
	 void det(Field<scalar>& res, const UList<tensor2>& f); 
	tmp<Field<scalar>> det(const UList<tensor2>& f); 
	tmp<Field<scalar>> det(const tmp<Field<tensor2>>& tf);  
	void inv(Field<tensor2>& res, const UList<tensor2>& f);  
	tmp<Field<tensor2>> inv(const UList<tensor2>& f);  
	tmp<Field<tensor2>> inv(const tmp<Field<tensor2>>& tf);  
	void diag(Field<diagTensor2>& res, const UList<tensor2>& f); 
	tmp<Field<diagTensor2>> diag(const UList<tensor2>& f);
	tmp<Field<diagTensor2>> diag(const tmp<Field<tensor2>>& tf);  
	void negSumDiag(Field<tensor2>& res, const UList<tensor2>& f); 
	tmp<Field<tensor2>> negSumDiag(const UList<tensor2>& f); 
	tmp<Field<tensor2>> negSumDiag(const tmp<Field<tensor2>>& tf); 
	void divide ( Field<tensor2>& f, const UList<scalar>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const UList<scalar>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const UList<scalar>& f1, const tmp<Field<tensor2>>& tf2 );  
	tmp<Field<tensor2>> operator / ( const tmp<Field<scalar>>& tf1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const tmp<Field<scalar>>& tf1, const tmp<Field<tensor2>>& tf2 ); 
	void divide ( Field<tensor2>& f, const scalar& s1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const scalar& s1, const UList<tensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const scalar& s1, const tmp<Field<tensor2>>& tf2 );
	void divide ( Field<tensor2>& f, const UList<scalar>& f1, const tensor2& s2 );  
	tmp<Field<tensor2>> operator / ( const UList<scalar>& f1, const tensor2& s2 );  
	tmp<Field<tensor2>> operator / ( const tmp<Field<scalar>>& tf1, const tensor2& s2 ); 
	void divide ( Field<vector2>& f, const UList<vector2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<vector2>> operator / ( const UList<vector2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<vector2>> operator / ( const UList<vector2>& f1, const tmp<Field<tensor2>>& tf2 ); 
	tmp<Field<vector2>> operator / ( const tmp<Field<vector2>>& tf1, const UList<tensor2>& f2 ); 
	tmp<Field<vector2>> operator / ( const tmp<Field<vector2>>& tf1, const tmp<Field<tensor2>>& tf2 );  
	void divide ( Field<vector2>& f, const vector2& s1, const UList<tensor2>& f2 ); 
	tmp<Field<vector2>> operator / ( const vector2& s1, const UList<tensor2>& f2 ); 
	tmp<Field<vector2>> operator / ( const vector2& s1, const tmp<Field<tensor2>>& tf2 ); 
	void divide ( Field<vector2>& f, const UList<vector2>& f1, const tensor2& s2 );  
	tmp<Field<vector2>> operator / ( const UList<vector2>& f1, const tensor2& s2 );  
	tmp<Field<vector2>> operator / ( const tmp<Field<vector2>>& tf1, const tensor2& s2 ); 
	void divide ( Field<tensor2>& f, const UList<tensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const UList<tensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const UList<tensor2>& f1, const tmp<Field<tensor2>>& tf2 ); 
	tmp<Field<tensor2>> operator / ( const tmp<Field<tensor2>>& tf1, const UList<tensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const tmp<Field<tensor2>>& tf1, const tmp<Field<tensor2>>& tf2 ); 
	void divide ( Field<tensor2>& f, const tensor2& s1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const tensor2& s1, const UList<tensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const tensor2& s1, const tmp<Field<tensor2>>& tf2 ); 
	void divide ( Field<tensor2>& f, const UList<tensor2>& f1, const tensor2& s2 );  
	tmp<Field<tensor2>> operator / ( const UList<tensor2>& f1, const tensor2& s2 );  
	tmp<Field<tensor2>> operator / ( const tmp<Field<tensor2>>& tf1, const tensor2& s2 ); 
	void divide ( Field<tensor2>& f, const UList<tensor2>& f1, const UList<diagTensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const UList<tensor2>& f1, const UList<diagTensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const UList<tensor2>& f1, const tmp<Field<diagTensor2>>& tf2 );  
	tmp<Field<tensor2>> operator / ( const tmp<Field<tensor2>>& tf1, const UList<diagTensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const tmp<Field<tensor2>>& tf1, const tmp<Field<diagTensor2>>& tf2 );
	void divide ( Field<tensor2>& f, const tensor2& s1, const UList<diagTensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const tensor2& s1, const UList<diagTensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const tensor2& s1, const tmp<Field<diagTensor2>>& tf2 );  
	void divide ( Field<tensor2>& f, const UList<tensor2>& f1, const diagTensor2& s2 );  
	tmp<Field<tensor2>> operator / ( const UList<tensor2>& f1, const diagTensor2& s2 ); 
	tmp<Field<tensor2>> operator / ( const tmp<Field<tensor2>>& tf1, const diagTensor2& s2 );  
	void divide ( Field<tensor2>& f, const UList<diagTensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const UList<diagTensor2>& f1, const UList<tensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const UList<diagTensor2>& f1, const tmp<Field<tensor2>>& tf2 );
	tmp<Field<tensor2>> operator / ( const tmp<Field<diagTensor2>>& tf1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const tmp<Field<diagTensor2>>& tf1, const tmp<Field<tensor2>>& tf2 ); 
	void divide ( Field<tensor2>& f, const diagTensor2& s1, const UList<tensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const diagTensor2& s1, const UList<tensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const diagTensor2& s1, const tmp<Field<tensor2>>& tf2 ); 
	void divide ( Field<tensor2>& f, const UList<diagTensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator / ( const UList<diagTensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator / ( const tmp<Field<diagTensor2>>& tf1, const tensor2& s2 ); 
	void divide ( Field<tensor2>& f, const UList<sphericalTensor2>& f1, const UList<tensor2>& f2 );
	tmp<Field<tensor2>> operator / ( const UList<sphericalTensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const UList<sphericalTensor2>& f1, const tmp<Field<tensor2>>& tf2 ); 
	tmp<Field<tensor2>> operator / ( const tmp<Field<sphericalTensor2>>& tf1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const tmp<Field<sphericalTensor2>>& tf1, const tmp<Field<tensor2>>& tf2 );
	void divide ( Field<tensor2>& f, const sphericalTensor2& s1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const sphericalTensor2& s1, const UList<tensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const sphericalTensor2& s1, const tmp<Field<tensor2>>& tf2 ); 
	void divide ( Field<tensor2>& f, const UList<sphericalTensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator / ( const UList<sphericalTensor2>& f1, const tensor2& s2 );
	tmp<Field<tensor2>> operator / ( const tmp<Field<sphericalTensor2>>& tf1, const tensor2& s2 ); 
	void divide ( Field<tensor2>& f, const UList<tensor2>& f1, const UList<sphericalTensor2>& f2 );
	tmp<Field<tensor2>> operator / ( const UList<tensor2>& f1, const UList<sphericalTensor2>& f2 ); 
	tmp<Field<tensor2>> operator / ( const UList<tensor2>& f1, const tmp<Field<sphericalTensor2>>& tf2 ); 
	tmp<Field<tensor2>> operator / ( const tmp<Field<tensor2>>& tf1, const UList<sphericalTensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const tmp<Field<tensor2>>& tf1, const tmp<Field<sphericalTensor2>>& tf2 );
	void divide ( Field<tensor2>& f, const tensor2& s1, const UList<sphericalTensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const tensor2& s1, const UList<sphericalTensor2>& f2 );  
	tmp<Field<tensor2>> operator / ( const tensor2& s1, const tmp<Field<sphericalTensor2>>& tf2 ); 
	void divide ( Field<tensor2>& f, const UList<tensor2>& f1, const sphericalTensor2& s2 ); 
	tmp<Field<tensor2>> operator / ( const UList<tensor2>& f1, const sphericalTensor2& s2 );  
	tmp<Field<tensor2>> operator / ( const tmp<Field<tensor2>>& tf1, const sphericalTensor2& s2 ); 
	void add ( Field<tensor2>& f, const UList<tensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const UList<tensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const UList<tensor2>& f1, const tmp<Field<tensor2>>& tf2 ); 
	tmp<Field<tensor2>> operator + ( const tmp<Field<tensor2>>& tf1, const UList<tensor2>& f2 );
	tmp<Field<tensor2>> operator + ( const tmp<Field<tensor2>>& tf1, const tmp<Field<tensor2>>& tf2 ); 
	void subtract ( Field<tensor2>& f, const UList<tensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const UList<tensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const UList<tensor2>& f1, const tmp<Field<tensor2>>& tf2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<tensor2>>& tf1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<tensor2>>& tf1, const tmp<Field<tensor2>>& tf2 ); 
	void add ( Field<tensor2>& f, const tensor2& s1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const tensor2& s1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const tensor2& s1, const tmp<Field<tensor2>>& tf2 ); 
	void add ( Field<tensor2>& f, const UList<tensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator + ( const UList<tensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator + ( const tmp<Field<tensor2>>& tf1, const tensor2& s2 );
	void subtract ( Field<tensor2>& f, const tensor2& s1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const tensor2& s1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const tensor2& s1, const tmp<Field<tensor2>>& tf2 );
	void subtract ( Field<tensor2>& f, const UList<tensor2>& f1, const tensor2& s2 );
	tmp<Field<tensor2>> operator - ( const UList<tensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<tensor2>>& tf1, const tensor2& s2 );
	void add ( Field<tensor2>& f, const UList<diagTensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const UList<diagTensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const UList<diagTensor2>& f1, const tmp<Field<tensor2>>& tf2 );
	tmp<Field<tensor2>> operator + ( const tmp<Field<diagTensor2>>& tf1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const tmp<Field<diagTensor2>>& tf1, const tmp<Field<tensor2>>& tf2 );
	void subtract ( Field<tensor2>& f, const UList<diagTensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const UList<diagTensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const UList<diagTensor2>& f1, const tmp<Field<tensor2>>& tf2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<diagTensor2>>& tf1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<diagTensor2>>& tf1, const tmp<Field<tensor2>>& tf2 );
	void add ( Field<tensor2>& f, const diagTensor2& s1, const UList<tensor2>& f2 );  
	tmp<Field<tensor2>> operator + ( const diagTensor2& s1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const diagTensor2& s1, const tmp<Field<tensor2>>& tf2 ); 
	void add ( Field<tensor2>& f, const UList<diagTensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator + ( const UList<diagTensor2>& f1, const tensor2& s2 );  
	tmp<Field<tensor2>> operator + ( const tmp<Field<diagTensor2>>& tf1, const tensor2& s2 ); 
	void subtract ( Field<tensor2>& f, const diagTensor2& s1, const UList<tensor2>& f2 );
	tmp<Field<tensor2>> operator - ( const diagTensor2& s1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const diagTensor2& s1, const tmp<Field<tensor2>>& tf2 ); 
	void subtract ( Field<tensor2>& f, const UList<diagTensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator - ( const UList<diagTensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<diagTensor2>>& tf1, const tensor2& s2 );
	void add ( Field<tensor2>& f, const UList<tensor2>& f1, const UList<diagTensor2>& f2 );  
	tmp<Field<tensor2>> operator + ( const UList<tensor2>& f1, const UList<diagTensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const UList<tensor2>& f1, const tmp<Field<diagTensor2>>& tf2 ); 
	tmp<Field<tensor2>> operator + ( const tmp<Field<tensor2>>& tf1, const UList<diagTensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const tmp<Field<tensor2>>& tf1, const tmp<Field<diagTensor2>>& tf2 ); 
	void subtract ( Field<tensor2>& f, const UList<tensor2>& f1, const UList<diagTensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const UList<tensor2>& f1, const UList<diagTensor2>& f2 );
	tmp<Field<tensor2>> operator - ( const UList<tensor2>& f1, const tmp<Field<diagTensor2>>& tf2 );  
	tmp<Field<tensor2>> operator - ( const tmp<Field<tensor2>>& tf1, const UList<diagTensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<tensor2>>& tf1, const tmp<Field<diagTensor2>>& tf2 ); 
	void add ( Field<tensor2>& f, const tensor2& s1, const UList<diagTensor2>& f2 );  
	tmp<Field<tensor2>> operator + ( const tensor2& s1, const UList<diagTensor2>& f2 );  
	tmp<Field<tensor2>> operator + ( const tensor2& s1, const tmp<Field<diagTensor2>>& tf2 ); 
	void add ( Field<tensor2>& f, const UList<tensor2>& f1, const diagTensor2& s2 ); 
	tmp<Field<tensor2>> operator + ( const UList<tensor2>& f1, const diagTensor2& s2 );  
	tmp<Field<tensor2>> operator + ( const tmp<Field<tensor2>>& tf1, const diagTensor2& s2 ); 
	void subtract ( Field<tensor2>& f, const tensor2& s1, const UList<diagTensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const tensor2& s1, const UList<diagTensor2>& f2 );  
	tmp<Field<tensor2>> operator - ( const tensor2& s1, const tmp<Field<diagTensor2>>& tf2 ); 
	void subtract ( Field<tensor2>& f, const UList<tensor2>& f1, const diagTensor2& s2 ); 
	tmp<Field<tensor2>> operator - ( const UList<tensor2>& f1, const diagTensor2& s2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<tensor2>>& tf1, const diagTensor2& s2 ); 
	void add ( Field<tensor2>& f, const UList<sphericalTensor2>& f1, const UList<tensor2>& f2 );
	tmp<Field<tensor2>> operator + ( const UList<sphericalTensor2>& f1, const UList<tensor2>& f2 );
	tmp<Field<tensor2>> operator + ( const UList<sphericalTensor2>& f1, const tmp<Field<tensor2>>& tf2 ); 
	tmp<Field<tensor2>> operator + ( const tmp<Field<sphericalTensor2>>& tf1, const UList<tensor2>& f2 );  
	tmp<Field<tensor2>> operator + ( const tmp<Field<sphericalTensor2>>& tf1, const tmp<Field<tensor2>>& tf2 ); 
	void subtract ( Field<tensor2>& f, const UList<sphericalTensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const UList<sphericalTensor2>& f1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const UList<sphericalTensor2>& f1, const tmp<Field<tensor2>>& tf2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<sphericalTensor2>>& tf1, const UList<tensor2>& f2 );
	tmp<Field<tensor2>> operator - ( const tmp<Field<sphericalTensor2>>& tf1, const tmp<Field<tensor2>>& tf2 ); 
	void add ( Field<tensor2>& f, const sphericalTensor2& s1, const UList<tensor2>& f2 );  
	tmp<Field<tensor2>> operator + ( const sphericalTensor2& s1, const UList<tensor2>& f2 );
	tmp<Field<tensor2>> operator + ( const sphericalTensor2& s1, const tmp<Field<tensor2>>& tf2 ); 
	void add ( Field<tensor2>& f, const UList<sphericalTensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator + ( const UList<sphericalTensor2>& f1, const tensor2& s2 );  
	tmp<Field<tensor2>> operator + ( const tmp<Field<sphericalTensor2>>& tf1, const tensor2& s2 ); 
	void subtract ( Field<tensor2>& f, const sphericalTensor2& s1, const UList<tensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const sphericalTensor2& s1, const UList<tensor2>& f2 );  
	tmp<Field<tensor2>> operator - ( const sphericalTensor2& s1, const tmp<Field<tensor2>>& tf2 ); 
	void subtract ( Field<tensor2>& f, const UList<sphericalTensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator - ( const UList<sphericalTensor2>& f1, const tensor2& s2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<sphericalTensor2>>& tf1, const tensor2& s2 ); 
	void add ( Field<tensor2>& f, const UList<tensor2>& f1, const UList<sphericalTensor2>& f2 );
	tmp<Field<tensor2>> operator + ( const UList<tensor2>& f1, const UList<sphericalTensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const UList<tensor2>& f1, const tmp<Field<sphericalTensor2>>& tf2 ); 
	tmp<Field<tensor2>> operator + ( const tmp<Field<tensor2>>& tf1, const UList<sphericalTensor2>& f2 ); 
	tmp<Field<tensor2>> operator + ( const tmp<Field<tensor2>>& tf1, const tmp<Field<sphericalTensor2>>& tf2 ); 
	void subtract ( Field<tensor2>& f, const UList<tensor2>& f1, const UList<sphericalTensor2>& f2 );  
	tmp<Field<tensor2>> operator - ( const UList<tensor2>& f1, const UList<sphericalTensor2>& f2 );  
	tmp<Field<tensor2>> operator - ( const UList<tensor2>& f1, const tmp<Field<sphericalTensor2>>& tf2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<tensor2>>& tf1, const UList<sphericalTensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const tmp<Field<tensor2>>& tf1, const tmp<Field<sphericalTensor2>>& tf2 );
	void add ( Field<tensor2>& f, const tensor2& s1, const UList<sphericalTensor2>& f2 );  
	tmp<Field<tensor2>> operator + ( const tensor2& s1, const UList<sphericalTensor2>& f2 );  
	tmp<Field<tensor2>> operator + ( const tensor2& s1, const tmp<Field<sphericalTensor2>>& tf2 ); 
	void add ( Field<tensor2>& f, const UList<tensor2>& f1, const sphericalTensor2& s2 );  
	tmp<Field<tensor2>> operator + ( const UList<tensor2>& f1, const sphericalTensor2& s2 );  
	tmp<Field<tensor2>> operator + ( const tmp<Field<tensor2>>& tf1, const sphericalTensor2& s2 ); 
	void subtract ( Field<tensor2>& f, const tensor2& s1, const UList<sphericalTensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const tensor2& s1, const UList<sphericalTensor2>& f2 ); 
	tmp<Field<tensor2>> operator - ( const tensor2& s1, const tmp<Field<sphericalTensor2>>& tf2 ); 
	void subtract ( Field<tensor2>& f, const UList<tensor2>& f1, const sphericalTensor2& s2 ); 
	tmp<Field<tensor2>> operator - ( const UList<tensor2>& f1, const sphericalTensor2& s2 );  
	tmp<Field<tensor2>> operator - ( const tmp<Field<tensor2>>& tf1, const sphericalTensor2& s2 ); 
	void det(Field<scalar>& res, const UList<tensor3>& f);  
	tmp<Field<scalar>> det(const UList<tensor3>& f); 
	tmp<Field<scalar>> det(const tmp<Field<tensor3>>& tf); 
	void inv(Field<tensor3>& res, const UList<tensor3>& f);  
	tmp<Field<tensor3>> inv(const UList<tensor3>& f);
	tmp<Field<tensor3>> inv(const tmp<Field<tensor3>>& tf); 
	void diag(Field<diagTensor3>& res, const UList<tensor3>& f); 
	tmp<Field<diagTensor3>> diag(const UList<tensor3>& f); 
	tmp<Field<diagTensor3>> diag(const tmp<Field<tensor3>>& tf); 
	void negSumDiag(Field<tensor3>& res, const UList<tensor3>& f); 
	tmp<Field<tensor3>> negSumDiag(const UList<tensor3>& f); 
	tmp<Field<tensor3>> negSumDiag(const tmp<Field<tensor3>>& tf); 
	void divide ( Field<tensor3>& f, const UList<scalar>& f1, const UList<tensor3>& f2 );
	tmp<Field<tensor3>> operator / ( const UList<scalar>& f1, const UList<tensor3>& f2 );
	tmp<Field<tensor3>> operator / ( const UList<scalar>& f1, const tmp<Field<tensor3>>& tf2 );
	tmp<Field<tensor3>> operator / ( const tmp<Field<scalar>>& tf1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<scalar>>& tf1, const tmp<Field<tensor3>>& tf2 ); 
	void divide ( Field<tensor3>& f, const scalar& s1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator / ( const scalar& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const scalar& s1, const tmp<Field<tensor3>>& tf2 ); 
	void divide ( Field<tensor3>& f, const UList<scalar>& f1, const tensor3& s2 ); 
	tmp<Field<tensor3>> operator / ( const UList<scalar>& f1, const tensor3& s2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<scalar>>& tf1, const tensor3& s2 ); 
	void divide ( Field<vector3>& f, const UList<vector3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<vector3>> operator / ( const UList<vector3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<vector3>> operator / ( const UList<vector3>& f1, const tmp<Field<tensor3>>& tf2 ); 
	tmp<Field<vector3>> operator / ( const tmp<Field<vector3>>& tf1, const UList<tensor3>& f2 );
	tmp<Field<vector3>> operator / ( const tmp<Field<vector3>>& tf1, const tmp<Field<tensor3>>& tf2 ); 
	void divide ( Field<vector3>& f, const vector3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<vector3>> operator / ( const vector3& s1, const UList<tensor3>& f2 );  
	tmp<Field<vector3>> operator / ( const vector3& s1, const tmp<Field<tensor3>>& tf2 );  
	void divide ( Field<vector3>& f, const UList<vector3>& f1, const tensor3& s2 ); 
	tmp<Field<vector3>> operator / ( const UList<vector3>& f1, const tensor3& s2 ); 
	tmp<Field<vector3>> operator / ( const tmp<Field<vector3>>& tf1, const tensor3& s2 );  
	void divide ( Field<tensor3>& f, const UList<tensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const UList<tensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const UList<tensor3>& f1, const tmp<Field<tensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<tensor3>>& tf1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<tensor3>>& tf1, const tmp<Field<tensor3>>& tf2 ); 
	void divide ( Field<tensor3>& f, const tensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const tensor3& s1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator / ( const tensor3& s1, const tmp<Field<tensor3>>& tf2 );  
	void divide ( Field<tensor3>& f, const UList<tensor3>& f1, const tensor3& s2 ); 
	tmp<Field<tensor3>> operator / ( const UList<tensor3>& f1, const tensor3& s2 );  
	tmp<Field<tensor3>> operator / ( const tmp<Field<tensor3>>& tf1, const tensor3& s2 );  
	void divide ( Field<tensor3>& f, const UList<tensor3>& f1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const UList<tensor3>& f1, const UList<diagTensor3>& f2 );  
	tmp<Field<tensor3>> operator / ( const UList<tensor3>& f1, const tmp<Field<diagTensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<tensor3>>& tf1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<tensor3>>& tf1, const tmp<Field<diagTensor3>>& tf2 );
	void divide ( Field<tensor3>& f, const tensor3& s1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const tensor3& s1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const tensor3& s1, const tmp<Field<diagTensor3>>& tf2 ); 
	void divide ( Field<tensor3>& f, const UList<tensor3>& f1, const diagTensor3& s2 ); 
	tmp<Field<tensor3>> operator / ( const UList<tensor3>& f1, const diagTensor3& s2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<tensor3>>& tf1, const diagTensor3& s2 );  
	void divide ( Field<tensor3>& f, const UList<diagTensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const UList<diagTensor3>& f1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator / ( const UList<diagTensor3>& f1, const tmp<Field<tensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<diagTensor3>>& tf1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<diagTensor3>>& tf1, const tmp<Field<tensor3>>& tf2 ); 
	void divide ( Field<tensor3>& f, const diagTensor3& s1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator / ( const diagTensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const diagTensor3& s1, const tmp<Field<tensor3>>& tf2 );  
	void divide ( Field<tensor3>& f, const UList<diagTensor3>& f1, const tensor3& s2 ); 
	tmp<Field<tensor3>> operator / ( const UList<diagTensor3>& f1, const tensor3& s2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<diagTensor3>>& tf1, const tensor3& s2 ); 
	void divide ( Field<tensor3>& f, const UList<sphericalTensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const UList<sphericalTensor3>& f1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator / ( const UList<sphericalTensor3>& f1, const tmp<Field<tensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<sphericalTensor3>>& tf1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator / ( const tmp<Field<sphericalTensor3>>& tf1, const tmp<Field<tensor3>>& tf2 );
	void divide ( Field<tensor3>& f, const sphericalTensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const sphericalTensor3& s1, const UList<tensor3>& f2 );
	tmp<Field<tensor3>> operator / ( const sphericalTensor3& s1, const tmp<Field<tensor3>>& tf2 ); 
	void divide ( Field<tensor3>& f, const UList<sphericalTensor3>& f1, const tensor3& s2 ); 
	tmp<Field<tensor3>> operator / ( const UList<sphericalTensor3>& f1, const tensor3& s2 );  
	tmp<Field<tensor3>> operator / ( const tmp<Field<sphericalTensor3>>& tf1, const tensor3& s2 );
	void divide ( Field<tensor3>& f, const UList<tensor3>& f1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const UList<tensor3>& f1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const UList<tensor3>& f1, const tmp<Field<sphericalTensor3>>& tf2 );
	tmp<Field<tensor3>> operator / ( const tmp<Field<tensor3>>& tf1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const tmp<Field<tensor3>>& tf1, const tmp<Field<sphericalTensor3>>& tf2 ); 
	void divide ( Field<tensor3>& f, const tensor3& s1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator / ( const tensor3& s1, const UList<sphericalTensor3>& f2 );  
	tmp<Field<tensor3>> operator / ( const tensor3& s1, const tmp<Field<sphericalTensor3>>& tf2 );  
	void divide ( Field<tensor3>& f, const UList<tensor3>& f1, const sphericalTensor3& s2 ); 
	tmp<Field<tensor3>> operator / ( const UList<tensor3>& f1, const sphericalTensor3& s2 );  
	tmp<Field<tensor3>> operator / ( const tmp<Field<tensor3>>& tf1, const sphericalTensor3& s2 ); 
	void add ( Field<tensor3>& f, const UList<tensor3>& f1, const UList<tensor3>& f2 );
	tmp<Field<tensor3>> operator + ( const UList<tensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const UList<tensor3>& f1, const tmp<Field<tensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator + ( const tmp<Field<tensor3>>& tf1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const tmp<Field<tensor3>>& tf1, const tmp<Field<tensor3>>& tf2 ); 
	void subtract ( Field<tensor3>& f, const UList<tensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const UList<tensor3>& f1, const UList<tensor3>& f2 );
	tmp<Field<tensor3>> operator - ( const UList<tensor3>& f1, const tmp<Field<tensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator - ( const tmp<Field<tensor3>>& tf1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const tmp<Field<tensor3>>& tf1, const tmp<Field<tensor3>>& tf2 );  
	void add ( Field<tensor3>& f, const tensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const tensor3& s1, const UList<tensor3>& f2 );
	tmp<Field<tensor3>> operator + ( const tensor3& s1, const tmp<Field<tensor3>>& tf2 );  
	void add ( Field<tensor3>& f, const UList<tensor3>& f1, const tensor3& s2 ); 
	tmp<Field<tensor3>> operator + ( const UList<tensor3>& f1, const tensor3& s2 ); 
	tmp<Field<tensor3>> operator + ( const tmp<Field<tensor3>>& tf1, const tensor3& s2 ); 
	void subtract ( Field<tensor3>& f, const tensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const tensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const tensor3& s1, const tmp<Field<tensor3>>& tf2 ); 
	void subtract ( Field<tensor3>& f, const UList<tensor3>& f1, const tensor3& s2 );
	tmp<Field<tensor3>> operator - ( const UList<tensor3>& f1, const tensor3& s2 );  
	tmp<Field<tensor3>> operator - ( const tmp<Field<tensor3>>& tf1, const tensor3& s2 ); 
	void add ( Field<tensor3>& f, const UList<diagTensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const UList<diagTensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const UList<diagTensor3>& f1, const tmp<Field<tensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator + ( const tmp<Field<diagTensor3>>& tf1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator + ( const tmp<Field<diagTensor3>>& tf1, const tmp<Field<tensor3>>& tf2 ); 
	void subtract ( Field<tensor3>& f, const UList<diagTensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const UList<diagTensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const UList<diagTensor3>& f1, const tmp<Field<tensor3>>& tf2 );  
	tmp<Field<tensor3>> operator - ( const tmp<Field<diagTensor3>>& tf1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator - ( const tmp<Field<diagTensor3>>& tf1, const tmp<Field<tensor3>>& tf2 );  
	void add ( Field<tensor3>& f, const diagTensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const diagTensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const diagTensor3& s1, const tmp<Field<tensor3>>& tf2 ); 
	void add ( Field<tensor3>& f, const UList<diagTensor3>& f1, const tensor3& s2 ); 
	tmp<Field<tensor3>> operator + ( const UList<diagTensor3>& f1, const tensor3& s2 );  
	tmp<Field<tensor3>> operator + ( const tmp<Field<diagTensor3>>& tf1, const tensor3& s2 );  
	void subtract ( Field<tensor3>& f, const diagTensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const diagTensor3& s1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator - ( const diagTensor3& s1, const tmp<Field<tensor3>>& tf2 ); 
	void subtract ( Field<tensor3>& f, const UList<diagTensor3>& f1, const tensor3& s2 );
	tmp<Field<tensor3>> operator - ( const UList<diagTensor3>& f1, const tensor3& s2 );  
	tmp<Field<tensor3>> operator - ( const tmp<Field<diagTensor3>>& tf1, const tensor3& s2 ); 
	void add ( Field<tensor3>& f, const UList<tensor3>& f1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const UList<tensor3>& f1, const UList<diagTensor3>& f2 );  
	tmp<Field<tensor3>> operator + ( const UList<tensor3>& f1, const tmp<Field<diagTensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator + ( const tmp<Field<tensor3>>& tf1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const tmp<Field<tensor3>>& tf1, const tmp<Field<diagTensor3>>& tf2 );
	void subtract ( Field<tensor3>& f, const UList<tensor3>& f1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const UList<tensor3>& f1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const UList<tensor3>& f1, const tmp<Field<diagTensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator - ( const tmp<Field<tensor3>>& tf1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const tmp<Field<tensor3>>& tf1, const tmp<Field<diagTensor3>>& tf2 ); 
	void add ( Field<tensor3>& f, const tensor3& s1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const tensor3& s1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const tensor3& s1, const tmp<Field<diagTensor3>>& tf2 ); 
	void add ( Field<tensor3>& f, const UList<tensor3>& f1, const diagTensor3& s2 );  
	tmp<Field<tensor3>> operator + ( const UList<tensor3>& f1, const diagTensor3& s2 );  
	tmp<Field<tensor3>> operator + ( const tmp<Field<tensor3>>& tf1, const diagTensor3& s2 ); 
	void subtract ( Field<tensor3>& f, const tensor3& s1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const tensor3& s1, const UList<diagTensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const tensor3& s1, const tmp<Field<diagTensor3>>& tf2 ); 
	void subtract ( Field<tensor3>& f, const UList<tensor3>& f1, const diagTensor3& s2 ); 
	tmp<Field<tensor3>> operator - ( const UList<tensor3>& f1, const diagTensor3& s2 ); 
	tmp<Field<tensor3>> operator - ( const tmp<Field<tensor3>>& tf1, const diagTensor3& s2 );  
	void add ( Field<tensor3>& f, const UList<sphericalTensor3>& f1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator + ( const UList<sphericalTensor3>& f1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator + ( const UList<sphericalTensor3>& f1, const tmp<Field<tensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator + ( const tmp<Field<sphericalTensor3>>& tf1, const UList<tensor3>& f2 );  
	tmp<Field<tensor3>> operator + ( const tmp<Field<sphericalTensor3>>& tf1, const tmp<Field<tensor3>>& tf2 ); 
	void subtract ( Field<tensor3>& f, const UList<sphericalTensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const UList<sphericalTensor3>& f1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const UList<sphericalTensor3>& f1, const tmp<Field<tensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator - ( const tmp<Field<sphericalTensor3>>& tf1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const tmp<Field<sphericalTensor3>>& tf1, const tmp<Field<tensor3>>& tf2 ); 
	void add ( Field<tensor3>& f, const sphericalTensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const sphericalTensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const sphericalTensor3& s1, const tmp<Field<tensor3>>& tf2 ); 
	void add ( Field<tensor3>& f, const UList<sphericalTensor3>& f1, const tensor3& s2 );  
	tmp<Field<tensor3>> operator + ( const UList<sphericalTensor3>& f1, const tensor3& s2 );  
	tmp<Field<tensor3>> operator + ( const tmp<Field<sphericalTensor3>>& tf1, const tensor3& s2 ); 
	void subtract ( Field<tensor3>& f, const sphericalTensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const sphericalTensor3& s1, const UList<tensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const sphericalTensor3& s1, const tmp<Field<tensor3>>& tf2 ); 
	void subtract ( Field<tensor3>& f, const UList<sphericalTensor3>& f1, const tensor3& s2 );  
	tmp<Field<tensor3>> operator - ( const UList<sphericalTensor3>& f1, const tensor3& s2 ); 
	tmp<Field<tensor3>> operator - ( const tmp<Field<sphericalTensor3>>& tf1, const tensor3& s2 );
	void add ( Field<tensor3>& f, const UList<tensor3>& f1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const UList<tensor3>& f1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const UList<tensor3>& f1, const tmp<Field<sphericalTensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator + ( const tmp<Field<tensor3>>& tf1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const tmp<Field<tensor3>>& tf1, const tmp<Field<sphericalTensor3>>& tf2 );  
	void subtract ( Field<tensor3>& f, const UList<tensor3>& f1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const UList<tensor3>& f1, const UList<sphericalTensor3>& f2 );  
	tmp<Field<tensor3>> operator - ( const UList<tensor3>& f1, const tmp<Field<sphericalTensor3>>& tf2 ); 
	tmp<Field<tensor3>> operator - ( const tmp<Field<tensor3>>& tf1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const tmp<Field<tensor3>>& tf1, const tmp<Field<sphericalTensor3>>& tf2 ); 
	void add ( Field<tensor3>& f, const tensor3& s1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const tensor3& s1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator + ( const tensor3& s1, const tmp<Field<sphericalTensor3>>& tf2 ); 
	void add ( Field<tensor3>& f, const UList<tensor3>& f1, const sphericalTensor3& s2 ); 
	tmp<Field<tensor3>> operator + ( const UList<tensor3>& f1, const sphericalTensor3& s2 );  
	tmp<Field<tensor3>> operator + ( const tmp<Field<tensor3>>& tf1, const sphericalTensor3& s2 );  
	void subtract ( Field<tensor3>& f, const tensor3& s1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const tensor3& s1, const UList<sphericalTensor3>& f2 ); 
	tmp<Field<tensor3>> operator - ( const tensor3& s1, const tmp<Field<sphericalTensor3>>& tf2 );
	void subtract ( Field<tensor3>& f, const UList<tensor3>& f1, const sphericalTensor3& s2 );
	tmp<Field<tensor3>> operator - ( const UList<tensor3>& f1, const sphericalTensor3& s2 ); 
	tmp<Field<tensor3>> operator - ( const tmp<Field<tensor3>>& tf1, const sphericalTensor3& s2 );
	void det(Field<scalar>& res, const UList<tensor4>& f); 
	tmp<Field<scalar>> det(const UList<tensor4>& f); 
	tmp<Field<scalar>> det(const tmp<Field<tensor4>>& tf); 
	void inv(Field<tensor4>& res, const UList<tensor4>& f); 
	tmp<Field<tensor4>> inv(const UList<tensor4>& f); 
	tmp<Field<tensor4>> inv(const tmp<Field<tensor4>>& tf); 
	void diag(Field<diagTensor4>& res, const UList<tensor4>& f); 
	tmp<Field<diagTensor4>> diag(const UList<tensor4>& f); 
	tmp<Field<diagTensor4>> diag(const tmp<Field<tensor4>>& tf);  
	void negSumDiag(Field<tensor4>& res, const UList<tensor4>& f);  
	tmp<Field<tensor4>> negSumDiag(const UList<tensor4>& f); 
	tmp<Field<tensor4>> negSumDiag(const tmp<Field<tensor4>>& tf); 
	void divide ( Field<tensor4>& f, const UList<scalar>& f1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const UList<scalar>& f1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const UList<scalar>& f1, const tmp<Field<tensor4>>& tf2 );
	tmp<Field<tensor4>> operator / ( const tmp<Field<scalar>>& tf1, const UList<tensor4>& f2 );
	tmp<Field<tensor4>> operator / ( const tmp<Field<scalar>>& tf1, const tmp<Field<tensor4>>& tf2 );
	void divide ( Field<tensor4>& f, const scalar& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const scalar& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const scalar& s1, const tmp<Field<tensor4>>& tf2 );  
	void divide ( Field<tensor4>& f, const UList<scalar>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator / ( const UList<scalar>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator / ( const tmp<Field<scalar>>& tf1, const tensor4& s2 ); 
	void divide ( Field<vector4>& f, const UList<vector4>& f1, const UList<tensor4>& f2 );
	tmp<Field<vector4>> operator / ( const UList<vector4>& f1, const UList<tensor4>& f2 );  
	tmp<Field<vector4>> operator / ( const UList<vector4>& f1, const tmp<Field<tensor4>>& tf2 );
	tmp<Field<vector4>> operator / ( const tmp<Field<vector4>>& tf1, const UList<tensor4>& f2 ); 
	tmp<Field<vector4>> operator / ( const tmp<Field<vector4>>& tf1, const tmp<Field<tensor4>>& tf2 );
	void divide ( Field<vector4>& f, const vector4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<vector4>> operator / ( const vector4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<vector4>> operator / ( const vector4& s1, const tmp<Field<tensor4>>& tf2 ); 
	void divide ( Field<vector4>& f, const UList<vector4>& f1, const tensor4& s2 );
	tmp<Field<vector4>> operator / ( const UList<vector4>& f1, const tensor4& s2 );  
	tmp<Field<vector4>> operator / ( const tmp<Field<vector4>>& tf1, const tensor4& s2 );  
	void divide ( Field<tensor4>& f, const UList<tensor4>& f1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const UList<tensor4>& f1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator / ( const UList<tensor4>& f1, const tmp<Field<tensor4>>& tf2 );  
	tmp<Field<tensor4>> operator / ( const tmp<Field<tensor4>>& tf1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator / ( const tmp<Field<tensor4>>& tf1, const tmp<Field<tensor4>>& tf2 );  
	void divide ( Field<tensor4>& f, const tensor4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const tensor4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const tensor4& s1, const tmp<Field<tensor4>>& tf2 ); 
	void divide ( Field<tensor4>& f, const UList<tensor4>& f1, const tensor4& s2 );  
	tmp<Field<tensor4>> operator / ( const UList<tensor4>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator / ( const tmp<Field<tensor4>>& tf1, const tensor4& s2 );  
	void divide ( Field<tensor4>& f, const UList<tensor4>& f1, const UList<diagTensor4>& f2 );  
	tmp<Field<tensor4>> operator / ( const UList<tensor4>& f1, const UList<diagTensor4>& f2 );  
	tmp<Field<tensor4>> operator / ( const UList<tensor4>& f1, const tmp<Field<diagTensor4>>& tf2 );
	tmp<Field<tensor4>> operator / ( const tmp<Field<tensor4>>& tf1, const UList<diagTensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const tmp<Field<tensor4>>& tf1, const tmp<Field<diagTensor4>>& tf2 ); 
	void divide ( Field<tensor4>& f, const tensor4& s1, const UList<diagTensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const tensor4& s1, const UList<diagTensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const tensor4& s1, const tmp<Field<diagTensor4>>& tf2 ); 
	void divide ( Field<tensor4>& f, const UList<tensor4>& f1, const diagTensor4& s2 ); 
	tmp<Field<tensor4>> operator / ( const UList<tensor4>& f1, const diagTensor4& s2 );  
	tmp<Field<tensor4>> operator / ( const tmp<Field<tensor4>>& tf1, const diagTensor4& s2 ); 
	void divide ( Field<tensor4>& f, const UList<diagTensor4>& f1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const UList<diagTensor4>& f1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator / ( const UList<diagTensor4>& f1, const tmp<Field<tensor4>>& tf2 );
	tmp<Field<tensor4>> operator / ( const tmp<Field<diagTensor4>>& tf1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const tmp<Field<diagTensor4>>& tf1, const tmp<Field<tensor4>>& tf2 );  
	void divide ( Field<tensor4>& f, const diagTensor4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const diagTensor4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const diagTensor4& s1, const tmp<Field<tensor4>>& tf2 );
	void divide ( Field<tensor4>& f, const UList<diagTensor4>& f1, const tensor4& s2 );
	tmp<Field<tensor4>> operator / ( const UList<diagTensor4>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator / ( const tmp<Field<diagTensor4>>& tf1, const tensor4& s2 ); 
	void divide ( Field<tensor4>& f, const UList<sphericalTensor4>& f1, const UList<tensor4>& f2 );
	tmp<Field<tensor4>> operator / ( const UList<sphericalTensor4>& f1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator / ( const UList<sphericalTensor4>& f1, const tmp<Field<tensor4>>& tf2 );
	tmp<Field<tensor4>> operator / ( const tmp<Field<sphericalTensor4>>& tf1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator / ( const tmp<Field<sphericalTensor4>>& tf1, const tmp<Field<tensor4>>& tf2 ); 
	void divide ( Field<tensor4>& f, const sphericalTensor4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const sphericalTensor4& s1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator / ( const sphericalTensor4& s1, const tmp<Field<tensor4>>& tf2 );  
	void divide ( Field<tensor4>& f, const UList<sphericalTensor4>& f1, const tensor4& s2 );
	tmp<Field<tensor4>> operator / ( const UList<sphericalTensor4>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator / ( const tmp<Field<sphericalTensor4>>& tf1, const tensor4& s2 );
	void divide ( Field<tensor4>& f, const UList<tensor4>& f1, const UList<sphericalTensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const UList<tensor4>& f1, const UList<sphericalTensor4>& f2 );  
	tmp<Field<tensor4>> operator / ( const UList<tensor4>& f1, const tmp<Field<sphericalTensor4>>& tf2 ); 
	tmp<Field<tensor4>> operator / ( const tmp<Field<tensor4>>& tf1, const UList<sphericalTensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const tmp<Field<tensor4>>& tf1, const tmp<Field<sphericalTensor4>>& tf2 );
	void divide ( Field<tensor4>& f, const tensor4& s1, const UList<sphericalTensor4>& f2 ); 
	tmp<Field<tensor4>> operator / ( const tensor4& s1, const UList<sphericalTensor4>& f2 );  
	tmp<Field<tensor4>> operator / ( const tensor4& s1, const tmp<Field<sphericalTensor4>>& tf2 ); 
	void divide ( Field<tensor4>& f, const UList<tensor4>& f1, const sphericalTensor4& s2 ); 
	tmp<Field<tensor4>> operator / ( const UList<tensor4>& f1, const sphericalTensor4& s2 ); 
	tmp<Field<tensor4>> operator / ( const tmp<Field<tensor4>>& tf1, const sphericalTensor4& s2 );  
	void add ( Field<tensor4>& f, const UList<tensor4>& f1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const UList<tensor4>& f1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const UList<tensor4>& f1, const tmp<Field<tensor4>>& tf2 ); 
	tmp<Field<tensor4>> operator + ( const tmp<Field<tensor4>>& tf1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator + ( const tmp<Field<tensor4>>& tf1, const tmp<Field<tensor4>>& tf2 ); 
	void subtract ( Field<tensor4>& f, const UList<tensor4>& f1, const UList<tensor4>& f2 );
	tmp<Field<tensor4>> operator - ( const UList<tensor4>& f1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator - ( const UList<tensor4>& f1, const tmp<Field<tensor4>>& tf2 ); 
	tmp<Field<tensor4>> operator - ( const tmp<Field<tensor4>>& tf1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const tmp<Field<tensor4>>& tf1, const tmp<Field<tensor4>>& tf2 );
	void add ( Field<tensor4>& f, const tensor4& s1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator + ( const tensor4& s1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator + ( const tensor4& s1, const tmp<Field<tensor4>>& tf2 ); 
	void add ( Field<tensor4>& f, const UList<tensor4>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator + ( const UList<tensor4>& f1, const tensor4& s2 );  
	tmp<Field<tensor4>> operator + ( const tmp<Field<tensor4>>& tf1, const tensor4& s2 ); 
	void subtract ( Field<tensor4>& f, const tensor4& s1, const UList<tensor4>& f2 );
	tmp<Field<tensor4>> operator - ( const tensor4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const tensor4& s1, const tmp<Field<tensor4>>& tf2 ); 
	void subtract ( Field<tensor4>& f, const UList<tensor4>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator - ( const UList<tensor4>& f1, const tensor4& s2 );  
	tmp<Field<tensor4>> operator - ( const tmp<Field<tensor4>>& tf1, const tensor4& s2 ); 
	void add ( Field<tensor4>& f, const UList<diagTensor4>& f1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const UList<diagTensor4>& f1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const UList<diagTensor4>& f1, const tmp<Field<tensor4>>& tf2 );  
	tmp<Field<tensor4>> operator + ( const tmp<Field<diagTensor4>>& tf1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator + ( const tmp<Field<diagTensor4>>& tf1, const tmp<Field<tensor4>>& tf2 ); 
	void subtract ( Field<tensor4>& f, const UList<diagTensor4>& f1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const UList<diagTensor4>& f1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const UList<diagTensor4>& f1, const tmp<Field<tensor4>>& tf2 ); 
	tmp<Field<tensor4>> operator - ( const tmp<Field<diagTensor4>>& tf1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator - ( const tmp<Field<diagTensor4>>& tf1, const tmp<Field<tensor4>>& tf2 ); 
	void add ( Field<tensor4>& f, const diagTensor4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const diagTensor4& s1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator + ( const diagTensor4& s1, const tmp<Field<tensor4>>& tf2 );  
	void add ( Field<tensor4>& f, const UList<diagTensor4>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator + ( const UList<diagTensor4>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator + ( const tmp<Field<diagTensor4>>& tf1, const tensor4& s2 ); 
	void subtract ( Field<tensor4>& f, const diagTensor4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const diagTensor4& s1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator - ( const diagTensor4& s1, const tmp<Field<tensor4>>& tf2 );  
	void subtract ( Field<tensor4>& f, const UList<diagTensor4>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator - ( const UList<diagTensor4>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator - ( const tmp<Field<diagTensor4>>& tf1, const tensor4& s2 );
	void add ( Field<tensor4>& f, const UList<tensor4>& f1, const UList<diagTensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const UList<tensor4>& f1, const UList<diagTensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const UList<tensor4>& f1, const tmp<Field<diagTensor4>>& tf2 ); 
	tmp<Field<tensor4>> operator + ( const tmp<Field<tensor4>>& tf1, const UList<diagTensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const tmp<Field<tensor4>>& tf1, const tmp<Field<diagTensor4>>& tf2 );
	void subtract ( Field<tensor4>& f, const UList<tensor4>& f1, const UList<diagTensor4>& f2 );
	tmp<Field<tensor4>> operator - ( const UList<tensor4>& f1, const UList<diagTensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const UList<tensor4>& f1, const tmp<Field<diagTensor4>>& tf2 );
	tmp<Field<tensor4>> operator - ( const tmp<Field<tensor4>>& tf1, const UList<diagTensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const tmp<Field<tensor4>>& tf1, const tmp<Field<diagTensor4>>& tf2 );
	void add ( Field<tensor4>& f, const tensor4& s1, const UList<diagTensor4>& f2 );  
	tmp<Field<tensor4>> operator + ( const tensor4& s1, const UList<diagTensor4>& f2 );  
	tmp<Field<tensor4>> operator + ( const tensor4& s1, const tmp<Field<diagTensor4>>& tf2 ); 
	void add ( Field<tensor4>& f, const UList<tensor4>& f1, const diagTensor4& s2 ); 
	tmp<Field<tensor4>> operator + ( const UList<tensor4>& f1, const diagTensor4& s2 ); 
	tmp<Field<tensor4>> operator + ( const tmp<Field<tensor4>>& tf1, const diagTensor4& s2 ); 
	void subtract ( Field<tensor4>& f, const tensor4& s1, const UList<diagTensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const tensor4& s1, const UList<diagTensor4>& f2 );  
	tmp<Field<tensor4>> operator - ( const tensor4& s1, const tmp<Field<diagTensor4>>& tf2 );
	void subtract ( Field<tensor4>& f, const UList<tensor4>& f1, const diagTensor4& s2 ); 
	tmp<Field<tensor4>> operator - ( const UList<tensor4>& f1, const diagTensor4& s2 );  
	tmp<Field<tensor4>> operator - ( const tmp<Field<tensor4>>& tf1, const diagTensor4& s2 ); 
	void add ( Field<tensor4>& f, const UList<sphericalTensor4>& f1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const UList<sphericalTensor4>& f1, const UList<tensor4>& f2 );
	tmp<Field<tensor4>> operator + ( const UList<sphericalTensor4>& f1, const tmp<Field<tensor4>>& tf2 ); 
	tmp<Field<tensor4>> operator + ( const tmp<Field<sphericalTensor4>>& tf1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator + ( const tmp<Field<sphericalTensor4>>& tf1, const tmp<Field<tensor4>>& tf2 );
	void subtract ( Field<tensor4>& f, const UList<sphericalTensor4>& f1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator - ( const UList<sphericalTensor4>& f1, const UList<tensor4>& f2 );  
	tmp<Field<tensor4>> operator - ( const UList<sphericalTensor4>& f1, const tmp<Field<tensor4>>& tf2 );
	tmp<Field<tensor4>> operator - ( const tmp<Field<sphericalTensor4>>& tf1, const UList<tensor4>& f2 );
	tmp<Field<tensor4>> operator - ( const tmp<Field<sphericalTensor4>>& tf1, const tmp<Field<tensor4>>& tf2 ); 
	void add ( Field<tensor4>& f, const sphericalTensor4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const sphericalTensor4& s1, const UList<tensor4>& f2 );
	tmp<Field<tensor4>> operator + ( const sphericalTensor4& s1, const tmp<Field<tensor4>>& tf2 );
	void add ( Field<tensor4>& f, const UList<sphericalTensor4>& f1, const tensor4& s2 );  
	tmp<Field<tensor4>> operator + ( const UList<sphericalTensor4>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator + ( const tmp<Field<sphericalTensor4>>& tf1, const tensor4& s2 );
	void subtract ( Field<tensor4>& f, const sphericalTensor4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const sphericalTensor4& s1, const UList<tensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const sphericalTensor4& s1, const tmp<Field<tensor4>>& tf2 ); 
	void subtract ( Field<tensor4>& f, const UList<sphericalTensor4>& f1, const tensor4& s2 ); 
	tmp<Field<tensor4>> operator - ( const UList<sphericalTensor4>& f1, const tensor4& s2 );  
	tmp<Field<tensor4>> operator - ( const tmp<Field<sphericalTensor4>>& tf1, const tensor4& s2 ); 
	void add ( Field<tensor4>& f, const UList<tensor4>& f1, const UList<sphericalTensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const UList<tensor4>& f1, const UList<sphericalTensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const UList<tensor4>& f1, const tmp<Field<sphericalTensor4>>& tf2 );  
	tmp<Field<tensor4>> operator + ( const tmp<Field<tensor4>>& tf1, const UList<sphericalTensor4>& f2 );  
	tmp<Field<tensor4>> operator + ( const tmp<Field<tensor4>>& tf1, const tmp<Field<sphericalTensor4>>& tf2 ); 
	void subtract ( Field<tensor4>& f, const UList<tensor4>& f1, const UList<sphericalTensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const UList<tensor4>& f1, const UList<sphericalTensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const UList<tensor4>& f1, const tmp<Field<sphericalTensor4>>& tf2 ); 
	tmp<Field<tensor4>> operator - ( const tmp<Field<tensor4>>& tf1, const UList<sphericalTensor4>& f2 );  
	tmp<Field<tensor4>> operator - ( const tmp<Field<tensor4>>& tf1, const tmp<Field<sphericalTensor4>>& tf2 ); 
	void add ( Field<tensor4>& f, const tensor4& s1, const UList<sphericalTensor4>& f2 );  
	tmp<Field<tensor4>> operator + ( const tensor4& s1, const UList<sphericalTensor4>& f2 ); 
	tmp<Field<tensor4>> operator + ( const tensor4& s1, const tmp<Field<sphericalTensor4>>& tf2 ); 
	void add ( Field<tensor4>& f, const UList<tensor4>& f1, const sphericalTensor4& s2 ); 
	tmp<Field<tensor4>> operator + ( const UList<tensor4>& f1, const sphericalTensor4& s2 );
	tmp<Field<tensor4>> operator + ( const tmp<Field<tensor4>>& tf1, const sphericalTensor4& s2 ); 
	void subtract ( Field<tensor4>& f, const tensor4& s1, const UList<sphericalTensor4>& f2 );  
	tmp<Field<tensor4>> operator - ( const tensor4& s1, const UList<sphericalTensor4>& f2 ); 
	tmp<Field<tensor4>> operator - ( const tensor4& s1, const tmp<Field<sphericalTensor4>>& tf2 ); 
	void subtract ( Field<tensor4>& f, const UList<tensor4>& f1, const sphericalTensor4& s2 ); 
	tmp<Field<tensor4>> operator - ( const UList<tensor4>& f1, const sphericalTensor4& s2 );  
	tmp<Field<tensor4>> operator - ( const tmp<Field<tensor4>>& tf1, const sphericalTensor4& s2 );
	void det(Field<scalar>& res, const UList<tensor6>& f);  
	tmp<Field<scalar>> det(const UList<tensor6>& f);
	tmp<Field<scalar>> det(const tmp<Field<tensor6>>& tf); 
	void inv(Field<tensor6>& res, const UList<tensor6>& f);  
	tmp<Field<tensor6>> inv(const UList<tensor6>& f); 
	tmp<Field<tensor6>> inv(const tmp<Field<tensor6>>& tf);  
	void diag(Field<diagTensor6>& res, const UList<tensor6>& f);  
	tmp<Field<diagTensor6>> diag(const UList<tensor6>& f); 
	tmp<Field<diagTensor6>> diag(const tmp<Field<tensor6>>& tf);
	void negSumDiag(Field<tensor6>& res, const UList<tensor6>& f);
	tmp<Field<tensor6>> negSumDiag(const UList<tensor6>& f); 
	tmp<Field<tensor6>> negSumDiag(const tmp<Field<tensor6>>& tf); 
	void divide ( Field<tensor6>& f, const UList<scalar>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const UList<scalar>& f1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator / ( const UList<scalar>& f1, const tmp<Field<tensor6>>& tf2 );
	tmp<Field<tensor6>> operator / ( const tmp<Field<scalar>>& tf1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator / ( const tmp<Field<scalar>>& tf1, const tmp<Field<tensor6>>& tf2 );  
	void divide ( Field<tensor6>& f, const scalar& s1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const scalar& s1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const scalar& s1, const tmp<Field<tensor6>>& tf2 ); 
	void divide ( Field<tensor6>& f, const UList<scalar>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator / ( const UList<scalar>& f1, const tensor6& s2 );  
	tmp<Field<tensor6>> operator / ( const tmp<Field<scalar>>& tf1, const tensor6& s2 );
	void divide ( Field<vector6>& f, const UList<vector6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<vector6>> operator / ( const UList<vector6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<vector6>> operator / ( const UList<vector6>& f1, const tmp<Field<tensor6>>& tf2 ); 
	tmp<Field<vector6>> operator / ( const tmp<Field<vector6>>& tf1, const UList<tensor6>& f2 );  
	tmp<Field<vector6>> operator / ( const tmp<Field<vector6>>& tf1, const tmp<Field<tensor6>>& tf2 ); 
	void divide ( Field<vector6>& f, const vector6& s1, const UList<tensor6>& f2 );  
	tmp<Field<vector6>> operator / ( const vector6& s1, const UList<tensor6>& f2 ); 
	tmp<Field<vector6>> operator / ( const vector6& s1, const tmp<Field<tensor6>>& tf2 );
	void divide ( Field<vector6>& f, const UList<vector6>& f1, const tensor6& s2 ); 
	tmp<Field<vector6>> operator / ( const UList<vector6>& f1, const tensor6& s2 ); 
	tmp<Field<vector6>> operator / ( const tmp<Field<vector6>>& tf1, const tensor6& s2 );
	void divide ( Field<tensor6>& f, const UList<tensor6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const UList<tensor6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const UList<tensor6>& f1, const tmp<Field<tensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator / ( const tmp<Field<tensor6>>& tf1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const tmp<Field<tensor6>>& tf1, const tmp<Field<tensor6>>& tf2 ); 
	void divide ( Field<tensor6>& f, const tensor6& s1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const tensor6& s1, const UList<tensor6>& f2 );
	tmp<Field<tensor6>> operator / ( const tensor6& s1, const tmp<Field<tensor6>>& tf2 ); 
	void divide ( Field<tensor6>& f, const UList<tensor6>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator / ( const UList<tensor6>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator / ( const tmp<Field<tensor6>>& tf1, const tensor6& s2 );
	void divide ( Field<tensor6>& f, const UList<tensor6>& f1, const UList<diagTensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const UList<tensor6>& f1, const UList<diagTensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const UList<tensor6>& f1, const tmp<Field<diagTensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator / ( const tmp<Field<tensor6>>& tf1, const UList<diagTensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const tmp<Field<tensor6>>& tf1, const tmp<Field<diagTensor6>>& tf2 ); 
	void divide ( Field<tensor6>& f, const tensor6& s1, const UList<diagTensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const tensor6& s1, const UList<diagTensor6>& f2 );  
	tmp<Field<tensor6>> operator / ( const tensor6& s1, const tmp<Field<diagTensor6>>& tf2 ); 
	void divide ( Field<tensor6>& f, const UList<tensor6>& f1, const diagTensor6& s2 ); 
	tmp<Field<tensor6>> operator / ( const UList<tensor6>& f1, const diagTensor6& s2 );
	tmp<Field<tensor6>> operator / ( const tmp<Field<tensor6>>& tf1, const diagTensor6& s2 );  
	void divide ( Field<tensor6>& f, const UList<diagTensor6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const UList<diagTensor6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const UList<diagTensor6>& f1, const tmp<Field<tensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator / ( const tmp<Field<diagTensor6>>& tf1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator / ( const tmp<Field<diagTensor6>>& tf1, const tmp<Field<tensor6>>& tf2 ); 
	void divide ( Field<tensor6>& f, const diagTensor6& s1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const diagTensor6& s1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator / ( const diagTensor6& s1, const tmp<Field<tensor6>>& tf2 );
	void divide ( Field<tensor6>& f, const UList<diagTensor6>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator / ( const UList<diagTensor6>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator / ( const tmp<Field<diagTensor6>>& tf1, const tensor6& s2 );
	void divide ( Field<tensor6>& f, const UList<sphericalTensor6>& f1, const UList<tensor6>& f2 );
	tmp<Field<tensor6>> operator / ( const UList<sphericalTensor6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const UList<sphericalTensor6>& f1, const tmp<Field<tensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator / ( const tmp<Field<sphericalTensor6>>& tf1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator / ( const tmp<Field<sphericalTensor6>>& tf1, const tmp<Field<tensor6>>& tf2 ); 
	void divide ( Field<tensor6>& f, const sphericalTensor6& s1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const sphericalTensor6& s1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator / ( const sphericalTensor6& s1, const tmp<Field<tensor6>>& tf2 );
	void divide ( Field<tensor6>& f, const UList<sphericalTensor6>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator / ( const UList<sphericalTensor6>& f1, const tensor6& s2 );  
	tmp<Field<tensor6>> operator / ( const tmp<Field<sphericalTensor6>>& tf1, const tensor6& s2 ); 
	void divide ( Field<tensor6>& f, const UList<tensor6>& f1, const UList<sphericalTensor6>& f2 );
	tmp<Field<tensor6>> operator / ( const UList<tensor6>& f1, const UList<sphericalTensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const UList<tensor6>& f1, const tmp<Field<sphericalTensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator / ( const tmp<Field<tensor6>>& tf1, const UList<sphericalTensor6>& f2 ); 
	tmp<Field<tensor6>> operator / ( const tmp<Field<tensor6>>& tf1, const tmp<Field<sphericalTensor6>>& tf2 );
	void divide ( Field<tensor6>& f, const tensor6& s1, const UList<sphericalTensor6>& f2 );  
	tmp<Field<tensor6>> operator / ( const tensor6& s1, const UList<sphericalTensor6>& f2 );  
	tmp<Field<tensor6>> operator / ( const tensor6& s1, const tmp<Field<sphericalTensor6>>& tf2 );  
	void divide ( Field<tensor6>& f, const UList<tensor6>& f1, const sphericalTensor6& s2 );
	tmp<Field<tensor6>> operator / ( const UList<tensor6>& f1, const sphericalTensor6& s2 ); 
	tmp<Field<tensor6>> operator / ( const tmp<Field<tensor6>>& tf1, const sphericalTensor6& s2 );
	void add ( Field<tensor6>& f, const UList<tensor6>& f1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator + ( const UList<tensor6>& f1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator + ( const UList<tensor6>& f1, const tmp<Field<tensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator + ( const tmp<Field<tensor6>>& tf1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator + ( const tmp<Field<tensor6>>& tf1, const tmp<Field<tensor6>>& tf2 ); 
	void subtract ( Field<tensor6>& f, const UList<tensor6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const UList<tensor6>& f1, const UList<tensor6>& f2 );
	tmp<Field<tensor6>> operator - ( const UList<tensor6>& f1, const tmp<Field<tensor6>>& tf2 );
	tmp<Field<tensor6>> operator - ( const tmp<Field<tensor6>>& tf1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const tmp<Field<tensor6>>& tf1, const tmp<Field<tensor6>>& tf2 ); 
	void add ( Field<tensor6>& f, const tensor6& s1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator + ( const tensor6& s1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const tensor6& s1, const tmp<Field<tensor6>>& tf2 ); 
	void add ( Field<tensor6>& f, const UList<tensor6>& f1, const tensor6& s2 );  
	tmp<Field<tensor6>> operator + ( const UList<tensor6>& f1, const tensor6& s2 );  
	tmp<Field<tensor6>> operator + ( const tmp<Field<tensor6>>& tf1, const tensor6& s2 ); 
	void subtract ( Field<tensor6>& f, const tensor6& s1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const tensor6& s1, const UList<tensor6>& f2 );
	tmp<Field<tensor6>> operator - ( const tensor6& s1, const tmp<Field<tensor6>>& tf2 );
	void subtract ( Field<tensor6>& f, const UList<tensor6>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator - ( const UList<tensor6>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator - ( const tmp<Field<tensor6>>& tf1, const tensor6& s2 );  
	void add ( Field<tensor6>& f, const UList<diagTensor6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const UList<diagTensor6>& f1, const UList<tensor6>& f2 );
	tmp<Field<tensor6>> operator + ( const UList<diagTensor6>& f1, const tmp<Field<tensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator + ( const tmp<Field<diagTensor6>>& tf1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const tmp<Field<diagTensor6>>& tf1, const tmp<Field<tensor6>>& tf2 );
	void subtract ( Field<tensor6>& f, const UList<diagTensor6>& f1, const UList<tensor6>& f2 );
	tmp<Field<tensor6>> operator - ( const UList<diagTensor6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const UList<diagTensor6>& f1, const tmp<Field<tensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator - ( const tmp<Field<diagTensor6>>& tf1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const tmp<Field<diagTensor6>>& tf1, const tmp<Field<tensor6>>& tf2 );  
	void add ( Field<tensor6>& f, const diagTensor6& s1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator + ( const diagTensor6& s1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator + ( const diagTensor6& s1, const tmp<Field<tensor6>>& tf2 ); 
	void add ( Field<tensor6>& f, const UList<diagTensor6>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator + ( const UList<diagTensor6>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator + ( const tmp<Field<diagTensor6>>& tf1, const tensor6& s2 ); 
	void subtract ( Field<tensor6>& f, const diagTensor6& s1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const diagTensor6& s1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator - ( const diagTensor6& s1, const tmp<Field<tensor6>>& tf2 ); 
	void subtract ( Field<tensor6>& f, const UList<diagTensor6>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator - ( const UList<diagTensor6>& f1, const tensor6& s2 );  
	tmp<Field<tensor6>> operator - ( const tmp<Field<diagTensor6>>& tf1, const tensor6& s2 ); 
	void add ( Field<tensor6>& f, const UList<tensor6>& f1, const UList<diagTensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const UList<tensor6>& f1, const UList<diagTensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const UList<tensor6>& f1, const tmp<Field<diagTensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator + ( const tmp<Field<tensor6>>& tf1, const UList<diagTensor6>& f2 );  
	tmp<Field<tensor6>> operator + ( const tmp<Field<tensor6>>& tf1, const tmp<Field<diagTensor6>>& tf2 ); 
	void subtract ( Field<tensor6>& f, const UList<tensor6>& f1, const UList<diagTensor6>& f2 );  
	tmp<Field<tensor6>> operator - ( const UList<tensor6>& f1, const UList<diagTensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const UList<tensor6>& f1, const tmp<Field<diagTensor6>>& tf2 );  
	tmp<Field<tensor6>> operator - ( const tmp<Field<tensor6>>& tf1, const UList<diagTensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const tmp<Field<tensor6>>& tf1, const tmp<Field<diagTensor6>>& tf2 ); 
	void add ( Field<tensor6>& f, const tensor6& s1, const UList<diagTensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const tensor6& s1, const UList<diagTensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const tensor6& s1, const tmp<Field<diagTensor6>>& tf2 ); 
	void add ( Field<tensor6>& f, const UList<tensor6>& f1, const diagTensor6& s2 );  
	tmp<Field<tensor6>> operator + ( const UList<tensor6>& f1, const diagTensor6& s2 );  
	tmp<Field<tensor6>> operator + ( const tmp<Field<tensor6>>& tf1, const diagTensor6& s2 );  
	void subtract ( Field<tensor6>& f, const tensor6& s1, const UList<diagTensor6>& f2 );  
	tmp<Field<tensor6>> operator - ( const tensor6& s1, const UList<diagTensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const tensor6& s1, const tmp<Field<diagTensor6>>& tf2 ); 
	void subtract ( Field<tensor6>& f, const UList<tensor6>& f1, const diagTensor6& s2 );  
	tmp<Field<tensor6>> operator - ( const UList<tensor6>& f1, const diagTensor6& s2 ); 
	tmp<Field<tensor6>> operator - ( const tmp<Field<tensor6>>& tf1, const diagTensor6& s2 );  
	void add ( Field<tensor6>& f, const UList<sphericalTensor6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const UList<sphericalTensor6>& f1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator + ( const UList<sphericalTensor6>& f1, const tmp<Field<tensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator + ( const tmp<Field<sphericalTensor6>>& tf1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const tmp<Field<sphericalTensor6>>& tf1, const tmp<Field<tensor6>>& tf2 ); 
	void subtract ( Field<tensor6>& f, const UList<sphericalTensor6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const UList<sphericalTensor6>& f1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const UList<sphericalTensor6>& f1, const tmp<Field<tensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator - ( const tmp<Field<sphericalTensor6>>& tf1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator - ( const tmp<Field<sphericalTensor6>>& tf1, const tmp<Field<tensor6>>& tf2 );
	void add ( Field<tensor6>& f, const sphericalTensor6& s1, const UList<tensor6>& f2 );  
	tmp<Field<tensor6>> operator + ( const sphericalTensor6& s1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const sphericalTensor6& s1, const tmp<Field<tensor6>>& tf2 );
	void add ( Field<tensor6>& f, const UList<sphericalTensor6>& f1, const tensor6& s2 ); 
	tmp<Field<tensor6>> operator + ( const UList<sphericalTensor6>& f1, const tensor6& s2 );
	tmp<Field<tensor6>> operator + ( const tmp<Field<sphericalTensor6>>& tf1, const tensor6& s2 ); 
	void subtract ( Field<tensor6>& f, const sphericalTensor6& s1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const sphericalTensor6& s1, const UList<tensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const sphericalTensor6& s1, const tmp<Field<tensor6>>& tf2 ); 
	void subtract ( Field<tensor6>& f, const UList<sphericalTensor6>& f1, const tensor6& s2 );  
	tmp<Field<tensor6>> operator - ( const UList<sphericalTensor6>& f1, const tensor6& s2 );  
	tmp<Field<tensor6>> operator - ( const tmp<Field<sphericalTensor6>>& tf1, const tensor6& s2 ); 
	void add ( Field<tensor6>& f, const UList<tensor6>& f1, const UList<sphericalTensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const UList<tensor6>& f1, const UList<sphericalTensor6>& f2 );
	tmp<Field<tensor6>> operator + ( const UList<tensor6>& f1, const tmp<Field<sphericalTensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator + ( const tmp<Field<tensor6>>& tf1, const UList<sphericalTensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const tmp<Field<tensor6>>& tf1, const tmp<Field<sphericalTensor6>>& tf2 ); 
	void subtract ( Field<tensor6>& f, const UList<tensor6>& f1, const UList<sphericalTensor6>& f2 );  
	tmp<Field<tensor6>> operator - ( const UList<tensor6>& f1, const UList<sphericalTensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const UList<tensor6>& f1, const tmp<Field<sphericalTensor6>>& tf2 ); 
	tmp<Field<tensor6>> operator - ( const tmp<Field<tensor6>>& tf1, const UList<sphericalTensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const tmp<Field<tensor6>>& tf1, const tmp<Field<sphericalTensor6>>& tf2 ); 
	void add ( Field<tensor6>& f, const tensor6& s1, const UList<sphericalTensor6>& f2 ); 
	tmp<Field<tensor6>> operator + ( const tensor6& s1, const UList<sphericalTensor6>& f2 );  
	tmp<Field<tensor6>> operator + ( const tensor6& s1, const tmp<Field<sphericalTensor6>>& tf2 ); 
	void add ( Field<tensor6>& f, const UList<tensor6>& f1, const sphericalTensor6& s2 ); 
	tmp<Field<tensor6>> operator + ( const UList<tensor6>& f1, const sphericalTensor6& s2 ); 
	tmp<Field<tensor6>> operator + ( const tmp<Field<tensor6>>& tf1, const sphericalTensor6& s2 ); 
	void subtract ( Field<tensor6>& f, const tensor6& s1, const UList<sphericalTensor6>& f2 );
	tmp<Field<tensor6>> operator - ( const tensor6& s1, const UList<sphericalTensor6>& f2 ); 
	tmp<Field<tensor6>> operator - ( const tensor6& s1, const tmp<Field<sphericalTensor6>>& tf2 );
	void subtract ( Field<tensor6>& f, const UList<tensor6>& f1, const sphericalTensor6& s2 );  
	tmp<Field<tensor6>> operator - ( const UList<tensor6>& f1, const sphericalTensor6& s2 ); 
	tmp<Field<tensor6>> operator - ( const tmp<Field<tensor6>>& tf1, const sphericalTensor6& s2 ); 
	void det(Field<scalar>& res, const UList<tensor8>& f); 
	tmp<Field<scalar>> det(const UList<tensor8>& f); 
	tmp<Field<scalar>> det(const tmp<Field<tensor8>>& tf); 
	void inv(Field<tensor8>& res, const UList<tensor8>& f);  
	tmp<Field<tensor8>> inv(const UList<tensor8>& f);
	tmp<Field<tensor8>> inv(const tmp<Field<tensor8>>& tf);  
	void diag(Field<diagTensor8>& res, const UList<tensor8>& f); 
	tmp<Field<diagTensor8>> diag(const UList<tensor8>& f); 
	tmp<Field<diagTensor8>> diag(const tmp<Field<tensor8>>& tf); 
	void negSumDiag(Field<tensor8>& res, const UList<tensor8>& f); 
	tmp<Field<tensor8>> negSumDiag(const UList<tensor8>& f); 
	tmp<Field<tensor8>> negSumDiag(const tmp<Field<tensor8>>& tf); 
	void divide ( Field<tensor8>& f, const UList<scalar>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const UList<scalar>& f1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const UList<scalar>& f1, const tmp<Field<tensor8>>& tf2 );  
	tmp<Field<tensor8>> operator / ( const tmp<Field<scalar>>& tf1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const tmp<Field<scalar>>& tf1, const tmp<Field<tensor8>>& tf2 );  
	void divide ( Field<tensor8>& f, const scalar& s1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const scalar& s1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const scalar& s1, const tmp<Field<tensor8>>& tf2 ); 
	void divide ( Field<tensor8>& f, const UList<scalar>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator / ( const UList<scalar>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator / ( const tmp<Field<scalar>>& tf1, const tensor8& s2 );
	void divide ( Field<vector8>& f, const UList<vector8>& f1, const UList<tensor8>& f2 );
	tmp<Field<vector8>> operator / ( const UList<vector8>& f1, const UList<tensor8>& f2 );  
	tmp<Field<vector8>> operator / ( const UList<vector8>& f1, const tmp<Field<tensor8>>& tf2 );  
	tmp<Field<vector8>> operator / ( const tmp<Field<vector8>>& tf1, const UList<tensor8>& f2 );  
	tmp<Field<vector8>> operator / ( const tmp<Field<vector8>>& tf1, const tmp<Field<tensor8>>& tf2 ); 
	void divide ( Field<vector8>& f, const vector8& s1, const UList<tensor8>& f2 ); 
	tmp<Field<vector8>> operator / ( const vector8& s1, const UList<tensor8>& f2 ); 
	tmp<Field<vector8>> operator / ( const vector8& s1, const tmp<Field<tensor8>>& tf2 );  
	void divide ( Field<vector8>& f, const UList<vector8>& f1, const tensor8& s2 );
	tmp<Field<vector8>> operator / ( const UList<vector8>& f1, const tensor8& s2 );  
	tmp<Field<vector8>> operator / ( const tmp<Field<vector8>>& tf1, const tensor8& s2 ); 
	void divide ( Field<tensor8>& f, const UList<tensor8>& f1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const UList<tensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const UList<tensor8>& f1, const tmp<Field<tensor8>>& tf2 ); 
	tmp<Field<tensor8>> operator / ( const tmp<Field<tensor8>>& tf1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const tmp<Field<tensor8>>& tf1, const tmp<Field<tensor8>>& tf2 );  
	void divide ( Field<tensor8>& f, const tensor8& s1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const tensor8& s1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const tensor8& s1, const tmp<Field<tensor8>>& tf2 );  
	void divide ( Field<tensor8>& f, const UList<tensor8>& f1, const tensor8& s2 );  
	tmp<Field<tensor8>> operator / ( const UList<tensor8>& f1, const tensor8& s2 );  
	tmp<Field<tensor8>> operator / ( const tmp<Field<tensor8>>& tf1, const tensor8& s2 ); 
	void divide ( Field<tensor8>& f, const UList<tensor8>& f1, const UList<diagTensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const UList<tensor8>& f1, const UList<diagTensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const UList<tensor8>& f1, const tmp<Field<diagTensor8>>& tf2 ); 
	tmp<Field<tensor8>> operator / ( const tmp<Field<tensor8>>& tf1, const UList<diagTensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const tmp<Field<tensor8>>& tf1, const tmp<Field<diagTensor8>>& tf2 ); 
	void divide ( Field<tensor8>& f, const tensor8& s1, const UList<diagTensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const tensor8& s1, const UList<diagTensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const tensor8& s1, const tmp<Field<diagTensor8>>& tf2 );
	void divide ( Field<tensor8>& f, const UList<tensor8>& f1, const diagTensor8& s2 ); 
	tmp<Field<tensor8>> operator / ( const UList<tensor8>& f1, const diagTensor8& s2 ); 
	tmp<Field<tensor8>> operator / ( const tmp<Field<tensor8>>& tf1, const diagTensor8& s2 );  
	void divide ( Field<tensor8>& f, const UList<diagTensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const UList<diagTensor8>& f1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const UList<diagTensor8>& f1, const tmp<Field<tensor8>>& tf2 ); 
	tmp<Field<tensor8>> operator / ( const tmp<Field<diagTensor8>>& tf1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const tmp<Field<diagTensor8>>& tf1, const tmp<Field<tensor8>>& tf2 );  
	void divide ( Field<tensor8>& f, const diagTensor8& s1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const diagTensor8& s1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const diagTensor8& s1, const tmp<Field<tensor8>>& tf2 ); 
	void divide ( Field<tensor8>& f, const UList<diagTensor8>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator / ( const UList<diagTensor8>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator / ( const tmp<Field<diagTensor8>>& tf1, const tensor8& s2 );
	void divide ( Field<tensor8>& f, const UList<sphericalTensor8>& f1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const UList<sphericalTensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const UList<sphericalTensor8>& f1, const tmp<Field<tensor8>>& tf2 );
	tmp<Field<tensor8>> operator / ( const tmp<Field<sphericalTensor8>>& tf1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const tmp<Field<sphericalTensor8>>& tf1, const tmp<Field<tensor8>>& tf2 ); 
	void divide ( Field<tensor8>& f, const sphericalTensor8& s1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const sphericalTensor8& s1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const sphericalTensor8& s1, const tmp<Field<tensor8>>& tf2 );
	void divide ( Field<tensor8>& f, const UList<sphericalTensor8>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator / ( const UList<sphericalTensor8>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator / ( const tmp<Field<sphericalTensor8>>& tf1, const tensor8& s2 ); 
	void divide ( Field<tensor8>& f, const UList<tensor8>& f1, const UList<sphericalTensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const UList<tensor8>& f1, const UList<sphericalTensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const UList<tensor8>& f1, const tmp<Field<sphericalTensor8>>& tf2 );  
	tmp<Field<tensor8>> operator / ( const tmp<Field<tensor8>>& tf1, const UList<sphericalTensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const tmp<Field<tensor8>>& tf1, const tmp<Field<sphericalTensor8>>& tf2 );
	void divide ( Field<tensor8>& f, const tensor8& s1, const UList<sphericalTensor8>& f2 ); 
	tmp<Field<tensor8>> operator / ( const tensor8& s1, const UList<sphericalTensor8>& f2 );  
	tmp<Field<tensor8>> operator / ( const tensor8& s1, const tmp<Field<sphericalTensor8>>& tf2 ); 
	void divide ( Field<tensor8>& f, const UList<tensor8>& f1, const sphericalTensor8& s2 ); 
	tmp<Field<tensor8>> operator / ( const UList<tensor8>& f1, const sphericalTensor8& s2 ); 
	tmp<Field<tensor8>> operator / ( const tmp<Field<tensor8>>& tf1, const sphericalTensor8& s2 );
	void add ( Field<tensor8>& f, const UList<tensor8>& f1, const UList<tensor8>& f2 );
	tmp<Field<tensor8>> operator + ( const UList<tensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const UList<tensor8>& f1, const tmp<Field<tensor8>>& tf2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<tensor8>>& tf1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<tensor8>>& tf1, const tmp<Field<tensor8>>& tf2 ); 
	void subtract ( Field<tensor8>& f, const UList<tensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const UList<tensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const UList<tensor8>& f1, const tmp<Field<tensor8>>& tf2 ); 
	tmp<Field<tensor8>> operator - ( const tmp<Field<tensor8>>& tf1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator - ( const tmp<Field<tensor8>>& tf1, const tmp<Field<tensor8>>& tf2 );
	void add ( Field<tensor8>& f, const tensor8& s1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const tensor8& s1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator + ( const tensor8& s1, const tmp<Field<tensor8>>& tf2 );  
	void add ( Field<tensor8>& f, const UList<tensor8>& f1, const tensor8& s2 );
	tmp<Field<tensor8>> operator + ( const UList<tensor8>& f1, const tensor8& s2 );  
	tmp<Field<tensor8>> operator + ( const tmp<Field<tensor8>>& tf1, const tensor8& s2 );  
	void subtract ( Field<tensor8>& f, const tensor8& s1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator - ( const tensor8& s1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator - ( const tensor8& s1, const tmp<Field<tensor8>>& tf2 ); 
	void subtract ( Field<tensor8>& f, const UList<tensor8>& f1, const tensor8& s2 );  
	tmp<Field<tensor8>> operator - ( const UList<tensor8>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator - ( const tmp<Field<tensor8>>& tf1, const tensor8& s2 );
	void add ( Field<tensor8>& f, const UList<diagTensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const UList<diagTensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const UList<diagTensor8>& f1, const tmp<Field<tensor8>>& tf2 );
	tmp<Field<tensor8>> operator + ( const tmp<Field<diagTensor8>>& tf1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<diagTensor8>>& tf1, const tmp<Field<tensor8>>& tf2 ); 
	void subtract ( Field<tensor8>& f, const UList<diagTensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const UList<diagTensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const UList<diagTensor8>& f1, const tmp<Field<tensor8>>& tf2 );  
	tmp<Field<tensor8>> operator - ( const tmp<Field<diagTensor8>>& tf1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const tmp<Field<diagTensor8>>& tf1, const tmp<Field<tensor8>>& tf2 );
	void add ( Field<tensor8>& f, const diagTensor8& s1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const diagTensor8& s1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator + ( const diagTensor8& s1, const tmp<Field<tensor8>>& tf2 ); 
	void add ( Field<tensor8>& f, const UList<diagTensor8>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator + ( const UList<diagTensor8>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<diagTensor8>>& tf1, const tensor8& s2 );
	void subtract ( Field<tensor8>& f, const diagTensor8& s1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const diagTensor8& s1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator - ( const diagTensor8& s1, const tmp<Field<tensor8>>& tf2 ); 
	void subtract ( Field<tensor8>& f, const UList<diagTensor8>& f1, const tensor8& s2 );  
	tmp<Field<tensor8>> operator - ( const UList<diagTensor8>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator - ( const tmp<Field<diagTensor8>>& tf1, const tensor8& s2 );  
	void add ( Field<tensor8>& f, const UList<tensor8>& f1, const UList<diagTensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const UList<tensor8>& f1, const UList<diagTensor8>& f2 );  
	tmp<Field<tensor8>> operator + ( const UList<tensor8>& f1, const tmp<Field<diagTensor8>>& tf2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<tensor8>>& tf1, const UList<diagTensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<tensor8>>& tf1, const tmp<Field<diagTensor8>>& tf2 ); 
	void subtract ( Field<tensor8>& f, const UList<tensor8>& f1, const UList<diagTensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const UList<tensor8>& f1, const UList<diagTensor8>& f2 );  
	tmp<Field<tensor8>> operator - ( const UList<tensor8>& f1, const tmp<Field<diagTensor8>>& tf2 ); 
	tmp<Field<tensor8>> operator - ( const tmp<Field<tensor8>>& tf1, const UList<diagTensor8>& f2 );  
	tmp<Field<tensor8>> operator - ( const tmp<Field<tensor8>>& tf1, const tmp<Field<diagTensor8>>& tf2 ); 
	void add ( Field<tensor8>& f, const tensor8& s1, const UList<diagTensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const tensor8& s1, const UList<diagTensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const tensor8& s1, const tmp<Field<diagTensor8>>& tf2 ); 
	void add ( Field<tensor8>& f, const UList<tensor8>& f1, const diagTensor8& s2 ); 
	tmp<Field<tensor8>> operator + ( const UList<tensor8>& f1, const diagTensor8& s2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<tensor8>>& tf1, const diagTensor8& s2 ); 
	void subtract ( Field<tensor8>& f, const tensor8& s1, const UList<diagTensor8>& f2 );  
	tmp<Field<tensor8>> operator - ( const tensor8& s1, const UList<diagTensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const tensor8& s1, const tmp<Field<diagTensor8>>& tf2 );  
	void subtract ( Field<tensor8>& f, const UList<tensor8>& f1, const diagTensor8& s2 );  
	tmp<Field<tensor8>> operator - ( const UList<tensor8>& f1, const diagTensor8& s2 );  
	tmp<Field<tensor8>> operator - ( const tmp<Field<tensor8>>& tf1, const diagTensor8& s2 ); 
	void add ( Field<tensor8>& f, const UList<sphericalTensor8>& f1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator + ( const UList<sphericalTensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const UList<sphericalTensor8>& f1, const tmp<Field<tensor8>>& tf2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<sphericalTensor8>>& tf1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<sphericalTensor8>>& tf1, const tmp<Field<tensor8>>& tf2 ); 
	void subtract ( Field<tensor8>& f, const UList<sphericalTensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const UList<sphericalTensor8>& f1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const UList<sphericalTensor8>& f1, const tmp<Field<tensor8>>& tf2 ); 
	tmp<Field<tensor8>> operator - ( const tmp<Field<sphericalTensor8>>& tf1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const tmp<Field<sphericalTensor8>>& tf1, const tmp<Field<tensor8>>& tf2 );
	void add ( Field<tensor8>& f, const sphericalTensor8& s1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const sphericalTensor8& s1, const UList<tensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const sphericalTensor8& s1, const tmp<Field<tensor8>>& tf2 ); 
	void add ( Field<tensor8>& f, const UList<sphericalTensor8>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator + ( const UList<sphericalTensor8>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<sphericalTensor8>>& tf1, const tensor8& s2 );
	void subtract ( Field<tensor8>& f, const sphericalTensor8& s1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator - ( const sphericalTensor8& s1, const UList<tensor8>& f2 );  
	tmp<Field<tensor8>> operator - ( const sphericalTensor8& s1, const tmp<Field<tensor8>>& tf2 );
	void subtract ( Field<tensor8>& f, const UList<sphericalTensor8>& f1, const tensor8& s2 ); 
	tmp<Field<tensor8>> operator - ( const UList<sphericalTensor8>& f1, const tensor8& s2 );  
	tmp<Field<tensor8>> operator - ( const tmp<Field<sphericalTensor8>>& tf1, const tensor8& s2 );
	void add ( Field<tensor8>& f, const UList<tensor8>& f1, const UList<sphericalTensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const UList<tensor8>& f1, const UList<sphericalTensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const UList<tensor8>& f1, const tmp<Field<sphericalTensor8>>& tf2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<tensor8>>& tf1, const UList<sphericalTensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const tmp<Field<tensor8>>& tf1, const tmp<Field<sphericalTensor8>>& tf2 );
	void subtract ( Field<tensor8>& f, const UList<tensor8>& f1, const UList<sphericalTensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const UList<tensor8>& f1, const UList<sphericalTensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const UList<tensor8>& f1, const tmp<Field<sphericalTensor8>>& tf2 );  
	tmp<Field<tensor8>> operator - ( const tmp<Field<tensor8>>& tf1, const UList<sphericalTensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const tmp<Field<tensor8>>& tf1, const tmp<Field<sphericalTensor8>>& tf2 ); 
	void add ( Field<tensor8>& f, const tensor8& s1, const UList<sphericalTensor8>& f2 ); 
	tmp<Field<tensor8>> operator + ( const tensor8& s1, const UList<sphericalTensor8>& f2 );
	tmp<Field<tensor8>> operator + ( const tensor8& s1, const tmp<Field<sphericalTensor8>>& tf2 );  
	void add ( Field<tensor8>& f, const UList<tensor8>& f1, const sphericalTensor8& s2 ); 
	tmp<Field<tensor8>> operator + ( const UList<tensor8>& f1, const sphericalTensor8& s2 );  
	tmp<Field<tensor8>> operator + ( const tmp<Field<tensor8>>& tf1, const sphericalTensor8& s2 );
	void subtract ( Field<tensor8>& f, const tensor8& s1, const UList<sphericalTensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const tensor8& s1, const UList<sphericalTensor8>& f2 ); 
	tmp<Field<tensor8>> operator - ( const tensor8& s1, const tmp<Field<sphericalTensor8>>& tf2 );
	void subtract ( Field<tensor8>& f, const UList<tensor8>& f1, const sphericalTensor8& s2 ); 
	tmp<Field<tensor8>> operator - ( const UList<tensor8>& f1, const sphericalTensor8& s2 ); 
	tmp<Field<tensor8>> operator - ( const tmp<Field<tensor8>>& tf1, const sphericalTensor8& s2 );
}

#undef TensorN_FieldFunctions

#include <undefFieldFunctionsM.hxx>

#endif // !_TensorNFields_Header
